<table class="table table-bordered table-striped table-on-white">
  <thead>
    <tr class="table-header">
      <th>Application</th>
      <% unless user_object.api_user? %>
        <th>Has access?</th>
      <% end %>
      <th><%= "Other" unless user_object.api_user? %> Permissions</th>
      <% if user_object.persisted? %>
        <th>Last synced at</th>
      <% end %>
    </tr>
  </thead>
  <tbody>
    <% applications_and_permissions(user_object).each do |(application, permissions)|
       attribute_name = user_object.api_user? ? 'api_user' : 'user'
       supported_permission_field_name = "#{attribute_name}[supported_permission_ids][]"
       supported_permission_field_prefix = "#{attribute_name}_application_#{application.id}_supported_permission" %>
      <tr>
        <td>
          <%= application.name %>
        </td>
        <% if user_object.api_user? %>
          <%
            # Emulate form.check_box helper:
            # http://api.rubyonrails.org/v3.1.3/classes/ActionView/Helpers/FormHelper.html#method-i-check_box
            # API Users will always have a "signin" permission for apps for which they have access token.
            # The hidden field ensures it is not lost.
          %>
          <%= hidden_field_tag supported_permission_field_name, application.signin_permission.id, id: "#{supported_permission_field_prefix}_signin" %>
        <% else %>
          <td>
            <%= label_tag "#{supported_permission_field_prefix}_signin", "Has access to #{application.name}?", class: "rm" %>
            <%= check_box_tag supported_permission_field_name, application.signin_permission.id, user_object.has_access_to?(application),
                              id: "#{supported_permission_field_prefix}_signin" %>
          </td>
        <% end %>
        <td>
          <%= label_tag "#{supported_permission_field_prefix}_ids", "Permissions for #{application.name}", class: "rm" %>
          <% supported_permissions_options = application.supported_permissions.grantable_from_ui
                                               .inject({}) {|h, per| h.merge(per.name => per.id) }
             supported_permissions_options.delete('signin') %>
          <%= select_tag supported_permission_field_name,
                          options_for_select(supported_permissions_options,
                            user_object.permission_ids_for(application) - [application.signin_permission.id]),
                          multiple: true,
                          class: "chosen-select",
                          id: "#{supported_permission_field_prefix}_ids",
                          'data-module' => 'chosen',
                          'data-placeholder' => 'Start typing to search for permissions'
          %>
        </td>
        <% if user_object.persisted? %>
          <td>
            <% synced_permissions = permissions.select { |p| p.last_synced_at.present? } %>
            <% if synced_permissions.any? %>
              <span class="label <%= sync_needed?(synced_permissions) ? "label-danger" : "label-success" %>">
                <%= time_ago_in_words(synced_permissions.map(&:last_synced_at).max) %> ago
              </span>
            <% else %>
              <span class="label label-danger">Never</span>
            <% end %>
          </td>
        <% end %>
      </tr>
    <% end %>
  </tbody>
</table>
